// <auto-generated />
using System;
using ElmnasaInfrastructure.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElmnasaInfrastructure.AppContext.Migraations
{
    [DbContext(typeof(ElmnasaContext))]
    [Migration("20240914074004_addTeacherSubjecttotablesandrenamemanyhtomanytablesaddquizsubjetcsaddteacherid")]
    partial class addTeacherSubjecttotablesandrenamemanyhtomanytablesaddquizsubjetcsaddteacherid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnswerQuestion", b =>
                {
                    b.Property<int>("AnswersId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswersId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswersQuetions", (string)null);
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isTrue")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.Grades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Question_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Teacher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Account_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.SubscribeSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Student_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscribeSubject");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Teacher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("TeacherSubject");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.UploadPdf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PdfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pdf_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadPdf");
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.UploadVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadVideo");
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuetions", (string)null);
                });

            modelBuilder.Entity("QuizTeacherSubject", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "TeacherSubjectId");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("QuizTeacherSubject", (string)null);
                });

            modelBuilder.Entity("SubscribeSubjectTeacherSubject", b =>
                {
                    b.Property<int>("SubscribeSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.HasKey("SubscribeSubjectId", "TeacherSubjectId");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("StudentSubscribeTeacherSubject", (string)null);
                });

            modelBuilder.Entity("TeacherSubjectUploadPdf", b =>
                {
                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("UploadPdfId")
                        .HasColumnType("int");

                    b.HasKey("TeacherSubjectId", "UploadPdfId");

                    b.HasIndex("UploadPdfId");

                    b.ToTable("TeacherSubjectuploadpdf", (string)null);
                });

            modelBuilder.Entity("TeacherSubjectUploadVideo", b =>
                {
                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("UploadVideoId")
                        .HasColumnType("int");

                    b.HasKey("TeacherSubjectId", "UploadVideoId");

                    b.HasIndex("UploadVideoId");

                    b.ToTable("TeacherSubjectuploadVideo", (string)null);
                });

            modelBuilder.Entity("AnswerQuestion", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElmnasaDomain.Entites.app.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.TeacherSubject", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.Subject", "Subject")
                        .WithOne("TeacherSubject")
                        .HasForeignKey("ElmnasaDomain.Entites.app.TeacherSubject", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElmnasaDomain.Entites.app.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizTeacherSubject", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElmnasaDomain.Entites.app.TeacherSubject", null)
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubscribeSubjectTeacherSubject", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.SubscribeSubject", null)
                        .WithMany()
                        .HasForeignKey("SubscribeSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElmnasaDomain.Entites.app.TeacherSubject", null)
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherSubjectUploadPdf", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.TeacherSubject", null)
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElmnasaDomain.Entites.app.UploadPdf", null)
                        .WithMany()
                        .HasForeignKey("UploadPdfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherSubjectUploadVideo", b =>
                {
                    b.HasOne("ElmnasaDomain.Entites.app.TeacherSubject", null)
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElmnasaDomain.Entites.app.UploadVideo", null)
                        .WithMany()
                        .HasForeignKey("UploadVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElmnasaDomain.Entites.app.Subject", b =>
                {
                    b.Navigation("TeacherSubject")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
